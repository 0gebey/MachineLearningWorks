# -*- coding: utf-8 -*-
"""
Created on Thu May 28 14:11:28 2020

@author: ogeda
"""

import pandas as pd
import numpy as np
from sklearn.svm import SVC
import matplotlib.pyplot as plt

data = pd.read_csv('Grand-slams-men-2013.csv', encoding='latin1', nrows=200)
testData = pd.read_csv('Grand-slams-men-2013.csv', encoding='latin1', skiprows=range(1, 201), nrows=40)


ACE1 = np.array(data['ACE.1'])
ACE2 = np.array(data['ACE.2'])
ACE11 = np.array(testData['ACE.1'])
ACE21 = np.array(testData['ACE.2'])
Result = np.array(data['Result'])
Result1 = np.array(testData['Result'])

X_train = np.vstack([ACE1,ACE2]).T
X_test = np.vstack([ACE11,ACE21]).T

y_train = np.vstack([Result]).T
y_test = np.vstack([Result1]).T

matrix1 = np.vstack([arr1,arr2,arr3,arr4]).T

kernelPred= [],
polyPred= [],
rbfPred = [],

arr1 = [],
arr2 = [],
arr3 = [],
arr4 = [],
arr5 = [],
arr6 = [],
arr7 = [],
arr8 = [],
arr9 = [],
arr10 = [],
arr11 = [],
arr12 = [],

model = SVC(kernel='linear', C=1E10)
model.fit(X_train,np.ravel(y_train))
y_pred = model.predict(X_test)
kernelPred.append(y_pred)
print(kernelPred)
for i in range(len(kernelPred)):
    if kernelPred[i] == 0 and X_test[i] == 0:
        arr1.append(kernelPred[i])
    if kernelPred[i] == 0 and X_test[i] == 1:
        arr2.append(kernelPred[i])
    if kernelPred[i] == 1 and X_test[i] == 1:
        arr3.append(kernelPred[i])
    if kernelPred[i] == 1 and X_test[i] == 0:
        arr4.append(kernelPred[i])
               
model = SVC(kernel='poly', C=1E10)
model.fit(X_train,np.ravel(y_train))
y_pred = model.predict(X_test)
polyPred.append(y_pred)
for i in range(len(polyPred)):
    if polyPred[i] == 0 and X_test[i] == 0:
        arr5.append(polyPred[i])
    if polyPred[i] == 0 and X_test[i] == 1:
        arr6.append(polyPred[i])
    if polyPred[i] == 1 and X_test[i] == 1:
        arr7.append(polyPred[i])
    if polyPred[i] == 1 and X_test[i] == 0:
        arr8.append(polyPred[i])
        
model = SVC(kernel='rbf', C=1E10)
model.fit(X_train,np.ravel(y_train))
y_pred = model.predict(X_test)
rbfPred.append(y_pred)
for i in range(len(kernelPred)):
    if rbfPred[i] == 0 and X_test[i] == 0:
        arr9.append(rbfPred[i])
    if rbfPred[i] == 0 and X_test[i] == 1:
        arr10.append(rbfPred[i])
    if rbfPred[i] == 1 and X_test[i] == 1:
        arr11.append(rbfPred[i])
    if rbfPred[i] == 1 and X_test[i] == 0:
        arr12.append(rbfPred[i])
matrix1 = np.vstack([arr1,arr2,arr3,arr4]).T
matrix2 = np.vstack([arr5,arr6,arr7,arr8]).T
matrix3 = np.vstack([arr9,arr10,arr11,arr12]).T
plt.scatter(matrix1[:,0],matrix1[:,1],matrix1[:,2],matrix1[:,3],s=50,xlabel='Number of Aces by Player1',ylabel='Number of Aces by Player2', color='k',marker="o") 
plt.legend((matrix1[:,0], matrix1[:,1], matrix1[:,2],matrix1[:,3]), ('1st Player Prediction(correct)', '1st Player Prediction(false)', '2st Player Prediction(true)','2st Player Prediction(false)' ))
plt.show()
plt.scatter(matrix2[:,0],matrix2[:,1],matrix2[:,2],matrix2[:,3],s=50,xlabel='Number of Aces by Player1',ylabel='Number of Aces by Player2', color='k',marker="o") 
plt.legend((matrix1[:,0], matrix1[:,1], matrix1[:,2],matrix1[:,3]), ('1st Player Prediction(correct)', '1st Player Prediction(false)', '2st Player Prediction(true)','2st Player Prediction(false)' ))
plt.show()
plt.scatter(matrix3[:,0],matrix3[:,1],matrix3[:,2],matrix3[:,3],s=50,xlabel='Number of Aces by Player1',ylabel='Number of Aces by Player2', color='k',marker="o")    
plt.legend((matrix1[:,0], matrix1[:,1], matrix1[:,2],matrix1[:,3]), ('1st Player Prediction(correct)', '1st Player Prediction(false)', '2st Player Prediction(true)','2st Player Prediction(false)' ))  
plt.show() 
